{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nconst _c0 = [\"payPalButtonContainer\"];\n\nclass ScriptService {\n  constructor(zone) {\n    this.zone = zone;\n  }\n\n  registerScript(url, globalVar, onReady) {\n    const existingGlobalVar = window[globalVar];\n\n    if (existingGlobalVar) {\n      // global variable is present = script was already loaded\n      this.zone.run(() => {\n        onReady(existingGlobalVar);\n      });\n      return;\n    } // prepare script elem\n\n\n    const scriptElem = document.createElement('script');\n    scriptElem.id = this.getElemId(globalVar);\n    scriptElem.innerHTML = '';\n\n    scriptElem.onload = () => {\n      this.zone.run(() => {\n        onReady(window[globalVar]);\n      });\n    };\n\n    scriptElem.src = url;\n    scriptElem.async = true;\n    scriptElem.defer = true; // add script to header\n\n    document.getElementsByTagName('head')[0].appendChild(scriptElem);\n  }\n\n  cleanup(globalVar) {\n    // remove script from DOM\n    const scriptElem = document.getElementById(this.getElemId(globalVar));\n\n    if (scriptElem) {\n      scriptElem.remove();\n    }\n  }\n\n  getElemId(globalVar) {\n    return `ngx-paypal-script-elem-${globalVar}`;\n  }\n\n}\n/** @nocollapse */\n\n\nScriptService.ɵfac = function ScriptService_Factory(t) {\n  return new (t || ScriptService)(i0.ɵɵinject(i0.NgZone));\n};\n/** @nocollapse */\n\n\nScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScriptService,\n  factory: ScriptService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScriptService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass PayPalScriptService {\n  constructor(scriptService) {\n    this.scriptService = scriptService;\n    this.paypalWindowName = 'paypal';\n  }\n\n  registerPayPalScript(config, onReady) {\n    this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\n  }\n\n  destroyPayPalScript() {\n    this.scriptService.cleanup(this.paypalWindowName);\n  }\n\n  getUrlForConfig(config) {\n    const params = [{\n      name: 'client-id',\n      value: config.clientId\n    }];\n\n    if (config.locale) {\n      params.push({\n        name: 'locale',\n        value: config.locale\n      });\n    }\n\n    if (config.currency) {\n      params.push({\n        name: 'currency',\n        value: config.currency\n      });\n    }\n\n    if (config.commit) {\n      params.push({\n        name: 'commit',\n        value: config.commit\n      });\n    }\n\n    if (config.vault) {\n      params.push({\n        name: 'vault',\n        value: config.vault\n      });\n    }\n\n    if (config.intent) {\n      params.push({\n        name: 'intent',\n        value: config.intent\n      });\n    }\n\n    if (config.funding) {\n      params.push({\n        name: 'components',\n        value: 'buttons,funding-eligibility'\n      });\n    }\n\n    if (config.extraParams) {\n      params.push(...config.extraParams);\n    }\n\n    return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\n  }\n\n  getQueryString(queryParams) {\n    let queryString = '';\n\n    for (let i = 0; i < queryParams.length; i++) {\n      const queryParam = queryParams[i];\n\n      if (i === 0) {\n        queryString += '?';\n      } else {\n        queryString += '&';\n      }\n\n      queryString += `${queryParam.name}=${queryParam.value}`;\n    }\n\n    return queryString;\n  }\n\n}\n/** @nocollapse */\n\n\nPayPalScriptService.ɵfac = function PayPalScriptService_Factory(t) {\n  return new (t || PayPalScriptService)(i0.ɵɵinject(ScriptService));\n};\n/** @nocollapse */\n\n\nPayPalScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PayPalScriptService,\n  factory: PayPalScriptService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PayPalScriptService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScriptService\n    }];\n  }, null);\n})();\n\nclass NgxPaypalComponent {\n  constructor(paypalScriptService, cdr, ngZone) {\n    this.paypalScriptService = paypalScriptService;\n    this.cdr = cdr;\n    this.ngZone = ngZone;\n    /**\r\n     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n     * sharing base configuration. In such a case only a single component may register script.\r\n     */\n\n    this.registerScript = true;\n    /**\r\n     * Emitted when paypal script is loaded\r\n     */\n\n    this.scriptLoaded = new EventEmitter();\n    this.ngUnsubscribe = new Subject();\n    /**\r\n     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n     */\n\n    this.initializePayPal = true;\n  }\n\n  set payPalButtonContainer(content) {\n    this.payPalButtonContainerElem = content;\n  }\n\n  ngOnChanges(changes) {\n    if (!this.payPalButtonContainerId) {\n      this.payPalButtonContainerId = this.generateElementId();\n    } // first time config setup\n\n\n    const config = this.config;\n\n    if (changes.config.isFirstChange()) {\n      if (config && this.registerScript) {\n        this.initPayPalScript(config, payPal => {\n          // store reference to paypal global script\n          this.payPal = payPal;\n          this.doPayPalCheck();\n        });\n      }\n    } // changes to config\n\n\n    if (!changes.config.isFirstChange()) {\n      this.reinitialize(config);\n    }\n  }\n\n  ngOnDestroy() {\n    this.paypalScriptService.destroyPayPalScript();\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n  ngAfterViewInit() {\n    this.doPayPalCheck();\n  }\n\n  customInit(payPal) {\n    this.payPal = payPal;\n    this.doPayPalCheck();\n  }\n\n  reinitialize(config) {\n    this.config = config;\n    this.payPal = undefined;\n    this.paypalScriptService.destroyPayPalScript();\n    this.payPalButtonContainerId = this.generateElementId();\n    this.initializePayPal = true;\n\n    if (this.payPalButtonContainerElem) {\n      try {\n        while (this.payPalButtonContainerElem.nativeElement.firstChild) {\n          this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    this.cdr.detectChanges();\n\n    if (this.config) {\n      if (!this.payPal) {\n        this.initPayPalScript(this.config, payPal => {\n          // store reference to paypal global script\n          this.payPal = payPal;\n          this.doPayPalCheck();\n        });\n      } else {\n        this.doPayPalCheck();\n      }\n    }\n  }\n\n  doPayPalCheck() {\n    if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\n      // make sure that id is also set\n      if (this.payPalButtonContainerElem.nativeElement.id) {\n        this.initializePayPal = false;\n        this.initPayPal(this.config, this.payPal);\n      }\n    }\n  }\n\n  initPayPalScript(config, initPayPal) {\n    this.paypalScriptService.registerPayPalScript({\n      clientId: config.clientId,\n      locale: config.advanced?.locale,\n      commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\n      currency: config.currency,\n      vault: config.vault,\n      intent: config.intent,\n      funding: config.fundingSource != undefined || config.fundingSource != null ? true : false,\n      extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\n    }, paypal => {\n      this.scriptLoaded.next(paypal);\n      initPayPal(paypal);\n    });\n  }\n\n  generateElementId() {\n    return `ngx-captcha-id-${this.generateGuid()}`;\n  }\n\n  initPayPal(config, paypal) {\n    // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\n    this.ngZone.runOutsideAngular(() => {\n      // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\n      const createOrder = (data, actions) => {\n        return this.ngZone.run(() => {\n          if (config.createOrderOnClient && config.createOrderOnServer) {\n            throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\n                    Please choose one or the other.`);\n          }\n\n          if (!config.createOrderOnClient && !config.createOrderOnServer) {\n            throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\n                    Please define one of these to create order.`);\n          }\n\n          if (config.createOrderOnClient) {\n            return actions.order.create(config.createOrderOnClient(data));\n          }\n\n          if (config.createOrderOnServer) {\n            return config.createOrderOnServer(data);\n          }\n\n          throw Error(`Invalid state for 'createOrder'.`);\n        });\n      };\n\n      const createSubscription = (data, actions) => {\n        return this.ngZone.run(() => {\n          if (config.createSubscriptionOnClient) {\n            return actions.subscription.create(config.createSubscriptionOnClient(data));\n          }\n\n          return;\n        });\n      };\n\n      const onShippingChange = (data, actions) => {\n        return this.ngZone.run(() => {\n          if (config.onShippingChange) {\n            return config.onShippingChange(data, actions);\n          }\n        });\n      };\n\n      const buttonsConfig = {\n        style: config.style,\n        fundingSource: undefined,\n        onApprove: (data, actions) => {\n          return this.ngZone.run(() => {\n            if (config.onApprove) {\n              config.onApprove(data, actions);\n            } // capture on server\n\n\n            if (config.authorizeOnServer) {\n              return config.authorizeOnServer(data, actions);\n            } // capture on client\n\n\n            const onClientAuthorization = config.onClientAuthorization;\n\n            if (onClientAuthorization) {\n              actions.order.capture().then(details => {\n                this.ngZone.run(() => {\n                  onClientAuthorization(details);\n                });\n              });\n            }\n          });\n        },\n        onError: error => {\n          this.ngZone.run(() => {\n            if (config.onError) {\n              config.onError(error);\n            }\n          });\n        },\n        onCancel: (data, actions) => {\n          this.ngZone.run(() => {\n            if (config.onCancel) {\n              config.onCancel(data, actions);\n            }\n          });\n        },\n        onClick: (data, actions) => {\n          this.ngZone.run(() => {\n            if (config.onClick) {\n              config.onClick(data, actions);\n            }\n          });\n        },\n        onInit: (data, actions) => {\n          this.ngZone.run(() => {\n            if (config.onInit) {\n              config.onInit(data, actions);\n            }\n          });\n        },\n        // Add the functions if they've been created in the config object\n        // The API only allows one of the two to be set\n        ...((config.createOrderOnClient || config.createOrderOnServer) && {\n          createOrder\n        }),\n        ...(config.createSubscriptionOnClient && {\n          createSubscription\n        }),\n        // The onShippingChange callback cannot be used with subscriptions\n        // so we only add it if it is set\n        ...(config.onShippingChange && {\n          onShippingChange\n        })\n      };\n      let fundSource = undefined;\n\n      switch (config.fundingSource) {\n        case \"PAYPAL\":\n          fundSource = paypal.FUNDING.PAYPAL;\n          break;\n\n        case \"CARD\":\n          fundSource = paypal.FUNDING.CARD;\n          break;\n\n        case \"PAYLATER\":\n          fundSource = paypal.FUNDING.PAYLATER;\n          break;\n\n        case \"CREDIT\":\n          fundSource = paypal.FUNDING.CREDIT;\n          break;\n\n        case \"VENMO\":\n          fundSource = paypal.FUNDING.VENMO;\n          break;\n\n        default:\n          break;\n      }\n\n      if (fundSource != undefined) {\n        buttonsConfig.fundingSource = fundSource;\n        if (config.fundingSource !== \"PAYPAL\") delete buttonsConfig.style?.color;\n      }\n\n      paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\n    });\n  }\n\n  generateGuid() {\n    let d = new Date().getTime(),\n        d2 = performance && performance.now && performance.now() * 1000 || 0;\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\n      let r = Math.random() * 16;\n\n      if (d > 0) {\n        r = (d + r) % 16 | 0;\n        d = Math.floor(d / 16);\n      } else {\n        r = (d2 + r) % 16 | 0;\n        d2 = Math.floor(d2 / 16);\n      }\n\n      return (c == \"x\" ? r : r & 0x7 | 0x8).toString(16);\n    });\n  }\n\n}\n/** @nocollapse */\n\n\nNgxPaypalComponent.ɵfac = function NgxPaypalComponent_Factory(t) {\n  return new (t || NgxPaypalComponent)(i0.ɵɵdirectiveInject(PayPalScriptService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n/** @nocollapse */\n\n\nNgxPaypalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxPaypalComponent,\n  selectors: [[\"ngx-paypal\"]],\n  viewQuery: function NgxPaypalComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.payPalButtonContainer = _t.first);\n    }\n  },\n  inputs: {\n    config: \"config\",\n    registerScript: \"registerScript\"\n  },\n  outputs: {\n    scriptLoaded: \"scriptLoaded\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 1,\n  consts: [[3, \"id\"], [\"payPalButtonContainer\", \"\"]],\n  template: function NgxPaypalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.payPalButtonContainerId);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPaypalComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      selector: \"ngx-paypal\",\n      template: `\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n  `\n    }]\n  }], function () {\n    return [{\n      type: PayPalScriptService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    config: [{\n      type: Input\n    }],\n    registerScript: [{\n      type: Input\n    }],\n    scriptLoaded: [{\n      type: Output\n    }],\n    payPalButtonContainer: [{\n      type: ViewChild,\n      args: [\"payPalButtonContainer\", {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass NgxPayPalModule {}\n/** @nocollapse */\n\n\nNgxPayPalModule.ɵfac = function NgxPayPalModule_Factory(t) {\n  return new (t || NgxPayPalModule)();\n};\n/** @nocollapse */\n\n\nNgxPayPalModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxPayPalModule\n});\n/** @nocollapse */\n\nNgxPayPalModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ScriptService, PayPalScriptService],\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPayPalModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxPaypalComponent],\n      exports: [NgxPaypalComponent],\n      providers: [ScriptService, PayPalScriptService]\n    }]\n  }], null, null);\n})();\n/** Public API */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService };","map":{"version":3,"names":["CommonModule","i0","Injectable","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","ViewChild","NgModule","Subject","ScriptService","constructor","zone","registerScript","url","globalVar","onReady","existingGlobalVar","window","run","scriptElem","document","createElement","id","getElemId","innerHTML","onload","src","async","defer","getElementsByTagName","appendChild","cleanup","getElementById","remove","ɵfac","NgZone","ɵprov","type","PayPalScriptService","scriptService","paypalWindowName","registerPayPalScript","config","getUrlForConfig","destroyPayPalScript","params","name","value","clientId","locale","push","currency","commit","vault","intent","funding","extraParams","getQueryString","queryParams","queryString","i","length","queryParam","NgxPaypalComponent","paypalScriptService","cdr","ngZone","scriptLoaded","ngUnsubscribe","initializePayPal","payPalButtonContainer","content","payPalButtonContainerElem","ngOnChanges","changes","payPalButtonContainerId","generateElementId","isFirstChange","initPayPalScript","payPal","doPayPalCheck","reinitialize","ngOnDestroy","next","complete","ngAfterViewInit","customInit","undefined","nativeElement","firstChild","removeChild","error","console","detectChanges","initPayPal","advanced","fundingSource","extraQueryParams","paypal","generateGuid","runOutsideAngular","createOrder","data","actions","createOrderOnClient","createOrderOnServer","Error","order","create","createSubscription","createSubscriptionOnClient","subscription","onShippingChange","buttonsConfig","style","onApprove","authorizeOnServer","onClientAuthorization","capture","then","details","onError","onCancel","onClick","onInit","fundSource","FUNDING","PAYPAL","CARD","PAYLATER","CREDIT","VENMO","color","Buttons","render","d","Date","getTime","d2","performance","now","replace","c","r","Math","random","floor","toString","ChangeDetectorRef","ɵcmp","args","changeDetection","OnPush","selector","template","static","NgxPayPalModule","ɵmod","ɵinj","imports","declarations","exports","providers"],"sources":["C:/Users/richa/OneDrive/Desktop/swen261/team-project-2221-swen-261-05-g-gforce/estore-api/src/main/java/com/products/api/productsapi/EstoreGUI/node_modules/ngx-paypal/fesm2020/ngx-paypal.mjs"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nclass ScriptService {\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n    }\r\n    registerScript(url, globalVar, onReady) {\r\n        const existingGlobalVar = window[globalVar];\r\n        if (existingGlobalVar) {\r\n            // global variable is present = script was already loaded\r\n            this.zone.run(() => {\r\n                onReady(existingGlobalVar);\r\n            });\r\n            return;\r\n        }\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.id = this.getElemId(globalVar);\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.onload = () => {\r\n            this.zone.run(() => {\r\n                onReady(window[globalVar]);\r\n            });\r\n        };\r\n        scriptElem.src = url;\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n    cleanup(globalVar) {\r\n        // remove script from DOM\r\n        const scriptElem = document.getElementById(this.getElemId(globalVar));\r\n        if (scriptElem) {\r\n            scriptElem.remove();\r\n        }\r\n    }\r\n    getElemId(globalVar) {\r\n        return `ngx-paypal-script-elem-${globalVar}`;\r\n    }\r\n}\r\n/** @nocollapse */ ScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: ScriptService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ ScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: ScriptService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: ScriptService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass PayPalScriptService {\r\n    constructor(scriptService) {\r\n        this.scriptService = scriptService;\r\n        this.paypalWindowName = 'paypal';\r\n    }\r\n    registerPayPalScript(config, onReady) {\r\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\r\n    }\r\n    destroyPayPalScript() {\r\n        this.scriptService.cleanup(this.paypalWindowName);\r\n    }\r\n    getUrlForConfig(config) {\r\n        const params = [\r\n            {\r\n                name: 'client-id',\r\n                value: config.clientId\r\n            }\r\n        ];\r\n        if (config.locale) {\r\n            params.push({\r\n                name: 'locale',\r\n                value: config.locale\r\n            });\r\n        }\r\n        if (config.currency) {\r\n            params.push({\r\n                name: 'currency',\r\n                value: config.currency\r\n            });\r\n        }\r\n        if (config.commit) {\r\n            params.push({\r\n                name: 'commit',\r\n                value: config.commit\r\n            });\r\n        }\r\n        if (config.vault) {\r\n            params.push({\r\n                name: 'vault',\r\n                value: config.vault\r\n            });\r\n        }\r\n        if (config.intent) {\r\n            params.push({\r\n                name: 'intent',\r\n                value: config.intent\r\n            });\r\n        }\r\n        if (config.funding) {\r\n            params.push({\r\n                name: 'components',\r\n                value: 'buttons,funding-eligibility'\r\n            });\r\n        }\r\n        if (config.extraParams) {\r\n            params.push(...config.extraParams);\r\n        }\r\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\r\n    }\r\n    getQueryString(queryParams) {\r\n        let queryString = '';\r\n        for (let i = 0; i < queryParams.length; i++) {\r\n            const queryParam = queryParams[i];\r\n            if (i === 0) {\r\n                queryString += '?';\r\n            }\r\n            else {\r\n                queryString += '&';\r\n            }\r\n            queryString += `${queryParam.name}=${queryParam.value}`;\r\n        }\r\n        return queryString;\r\n    }\r\n}\r\n/** @nocollapse */ PayPalScriptService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: PayPalScriptService, deps: [{ token: ScriptService }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ PayPalScriptService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: PayPalScriptService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: PayPalScriptService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: ScriptService }]; } });\n\nclass NgxPaypalComponent {\r\n    constructor(paypalScriptService, cdr, ngZone) {\r\n        this.paypalScriptService = paypalScriptService;\r\n        this.cdr = cdr;\r\n        this.ngZone = ngZone;\r\n        /**\r\n         * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n         * sharing base configuration. In such a case only a single component may register script.\r\n         */\r\n        this.registerScript = true;\r\n        /**\r\n         * Emitted when paypal script is loaded\r\n         */\r\n        this.scriptLoaded = new EventEmitter();\r\n        this.ngUnsubscribe = new Subject();\r\n        /**\r\n         * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n         */\r\n        this.initializePayPal = true;\r\n    }\r\n    set payPalButtonContainer(content) {\r\n        this.payPalButtonContainerElem = content;\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this.payPalButtonContainerId) {\r\n            this.payPalButtonContainerId = this.generateElementId();\r\n        }\r\n        // first time config setup\r\n        const config = this.config;\r\n        if (changes.config.isFirstChange()) {\r\n            if (config && this.registerScript) {\r\n                this.initPayPalScript(config, (payPal) => {\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                });\r\n            }\r\n        }\r\n        // changes to config\r\n        if (!changes.config.isFirstChange()) {\r\n            this.reinitialize(config);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.doPayPalCheck();\r\n    }\r\n    customInit(payPal) {\r\n        this.payPal = payPal;\r\n        this.doPayPalCheck();\r\n    }\r\n    reinitialize(config) {\r\n        this.config = config;\r\n        this.payPal = undefined;\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.payPalButtonContainerId = this.generateElementId();\r\n        this.initializePayPal = true;\r\n        if (this.payPalButtonContainerElem) {\r\n            try {\r\n                while (this.payPalButtonContainerElem.nativeElement.firstChild) {\r\n                    this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        this.cdr.detectChanges();\r\n        if (this.config) {\r\n            if (!this.payPal) {\r\n                this.initPayPalScript(this.config, (payPal) => {\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                });\r\n            }\r\n            else {\r\n                this.doPayPalCheck();\r\n            }\r\n        }\r\n    }\r\n    doPayPalCheck() {\r\n        if (this.initializePayPal &&\r\n            this.config &&\r\n            this.payPal &&\r\n            this.payPalButtonContainerElem) {\r\n            // make sure that id is also set\r\n            if (this.payPalButtonContainerElem.nativeElement.id) {\r\n                this.initializePayPal = false;\r\n                this.initPayPal(this.config, this.payPal);\r\n            }\r\n        }\r\n    }\r\n    initPayPalScript(config, initPayPal) {\r\n        this.paypalScriptService.registerPayPalScript({\r\n            clientId: config.clientId,\r\n            locale: config.advanced?.locale,\r\n            commit: config.advanced && config.advanced.commit\r\n                ? config.advanced.commit\r\n                : undefined,\r\n            currency: config.currency,\r\n            vault: config.vault,\r\n            intent: config.intent,\r\n            funding: config.fundingSource != undefined || config.fundingSource != null ? true : false,\r\n            extraParams: config.advanced && config.advanced.extraQueryParams\r\n                ? config.advanced.extraQueryParams\r\n                : [],\r\n        }, (paypal) => {\r\n            this.scriptLoaded.next(paypal);\r\n            initPayPal(paypal);\r\n        });\r\n    }\r\n    generateElementId() {\r\n        return `ngx-captcha-id-${this.generateGuid()}`;\r\n    }\r\n    initPayPal(config, paypal) {\r\n        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\r\n        this.ngZone.runOutsideAngular(() => {\r\n            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\r\n            const createOrder = (data, actions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.createOrderOnClient && config.createOrderOnServer) {\r\n                        throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\r\n                    Please choose one or the other.`);\r\n                    }\r\n                    if (!config.createOrderOnClient && !config.createOrderOnServer) {\r\n                        throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\r\n                    Please define one of these to create order.`);\r\n                    }\r\n                    if (config.createOrderOnClient) {\r\n                        return actions.order.create(config.createOrderOnClient(data));\r\n                    }\r\n                    if (config.createOrderOnServer) {\r\n                        return config.createOrderOnServer(data);\r\n                    }\r\n                    throw Error(`Invalid state for 'createOrder'.`);\r\n                });\r\n            };\r\n            const createSubscription = (data, actions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.createSubscriptionOnClient) {\r\n                        return actions.subscription.create(config.createSubscriptionOnClient(data));\r\n                    }\r\n                    return;\r\n                });\r\n            };\r\n            const onShippingChange = (data, actions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.onShippingChange) {\r\n                        return config.onShippingChange(data, actions);\r\n                    }\r\n                });\r\n            };\r\n            const buttonsConfig = {\r\n                style: config.style,\r\n                fundingSource: undefined,\r\n                onApprove: (data, actions) => {\r\n                    return this.ngZone.run(() => {\r\n                        if (config.onApprove) {\r\n                            config.onApprove(data, actions);\r\n                        }\r\n                        // capture on server\r\n                        if (config.authorizeOnServer) {\r\n                            return config.authorizeOnServer(data, actions);\r\n                        }\r\n                        // capture on client\r\n                        const onClientAuthorization = config.onClientAuthorization;\r\n                        if (onClientAuthorization) {\r\n                            actions.order\r\n                                .capture()\r\n                                .then((details) => {\r\n                                this.ngZone.run(() => {\r\n                                    onClientAuthorization(details);\r\n                                });\r\n                            });\r\n                        }\r\n                    });\r\n                },\r\n                onError: (error) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onError) {\r\n                            config.onError(error);\r\n                        }\r\n                    });\r\n                },\r\n                onCancel: (data, actions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onCancel) {\r\n                            config.onCancel(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                onClick: (data, actions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onClick) {\r\n                            config.onClick(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                onInit: (data, actions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onInit) {\r\n                            config.onInit(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                // Add the functions if they've been created in the config object\r\n                // The API only allows one of the two to be set\r\n                ...((config.createOrderOnClient || config.createOrderOnServer) && {\r\n                    createOrder,\r\n                }),\r\n                ...(config.createSubscriptionOnClient && { createSubscription }),\r\n                // The onShippingChange callback cannot be used with subscriptions\r\n                // so we only add it if it is set\r\n                ...(config.onShippingChange && { onShippingChange }),\r\n            };\r\n            let fundSource = undefined;\r\n            switch (config.fundingSource) {\r\n                case \"PAYPAL\":\r\n                    fundSource = paypal.FUNDING.PAYPAL;\r\n                    break;\r\n                case \"CARD\":\r\n                    fundSource = paypal.FUNDING.CARD;\r\n                    break;\r\n                case \"PAYLATER\":\r\n                    fundSource = paypal.FUNDING.PAYLATER;\r\n                    break;\r\n                case \"CREDIT\":\r\n                    fundSource = paypal.FUNDING.CREDIT;\r\n                    break;\r\n                case \"VENMO\":\r\n                    fundSource = paypal.FUNDING.VENMO;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            if (fundSource != undefined) {\r\n                buttonsConfig.fundingSource = fundSource;\r\n                if (config.fundingSource !== \"PAYPAL\")\r\n                    delete buttonsConfig.style?.color;\r\n            }\r\n            paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\r\n        });\r\n    }\r\n    generateGuid() {\r\n        let d = new Date().getTime(), d2 = (performance && performance.now && performance.now() * 1000) || 0;\r\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\r\n            let r = Math.random() * 16;\r\n            if (d > 0) {\r\n                r = (d + r) % 16 | 0;\r\n                d = Math.floor(d / 16);\r\n            }\r\n            else {\r\n                r = (d2 + r) % 16 | 0;\r\n                d2 = Math.floor(d2 / 16);\r\n            }\r\n            return (c == \"x\" ? r : (r & 0x7) | 0x8).toString(16);\r\n        });\r\n    }\r\n}\r\n/** @nocollapse */ NgxPaypalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: NgxPaypalComponent, deps: [{ token: PayPalScriptService }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgxPaypalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.1.3\", type: NgxPaypalComponent, selector: \"ngx-paypal\", inputs: { config: \"config\", registerScript: \"registerScript\" }, outputs: { scriptLoaded: \"scriptLoaded\" }, viewQueries: [{ propertyName: \"payPalButtonContainer\", first: true, predicate: [\"payPalButtonContainer\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\r\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\r\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: NgxPaypalComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    selector: \"ngx-paypal\",\r\n                    template: `\r\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\r\n  `,\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: PayPalScriptService }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { config: [{\r\n                type: Input\r\n            }], registerScript: [{\r\n                type: Input\r\n            }], scriptLoaded: [{\r\n                type: Output\r\n            }], payPalButtonContainer: [{\r\n                type: ViewChild,\r\n                args: [\"payPalButtonContainer\", { static: false }]\r\n            }] } });\n\nclass NgxPayPalModule {\r\n}\r\n/** @nocollapse */ NgxPayPalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: NgxPayPalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxPayPalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.1.3\", ngImport: i0, type: NgxPayPalModule, declarations: [NgxPaypalComponent], imports: [CommonModule], exports: [NgxPaypalComponent] });\r\n/** @nocollapse */ NgxPayPalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: NgxPayPalModule, providers: [\r\n        ScriptService,\r\n        PayPalScriptService\r\n    ], imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.3\", ngImport: i0, type: NgxPayPalModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    declarations: [\r\n                        NgxPaypalComponent,\r\n                    ],\r\n                    exports: [\r\n                        NgxPaypalComponent,\r\n                    ],\r\n                    providers: [\r\n                        ScriptService,\r\n                        PayPalScriptService\r\n                    ]\r\n                }]\r\n        }] });\n\n/** Public API */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}